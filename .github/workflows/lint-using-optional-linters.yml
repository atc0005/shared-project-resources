# Copyright 2023 Adam Chalkley
#
# https://github.com/atc0005/shared-project-resources
#
# Licensed under the MIT License. See LICENSE file in the project root for
# full license information.

on:
  workflow_call:
    inputs:
      default-repo:
        required: false
        type: string
        default: origin
      primary-branch:
        required: false
        type: string
        default: master
      development-branch:
        required: false
        type: string
        default: development

jobs:
  # https://stackoverflow.com/questions/76151411/use-github-actions-to-check-if-branch-is-up-to-date-with-main
  # https://stackoverflow.com/a/76151412/903870
  # https://github.com/atc0005/shared-project-resources/issues/135
  assert_pr_branch_is_ahead_of_primary_branch:
    name: Assert PR branch is ahead
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check out code (full history)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v3.5.3
        with:
          # Full history is needed to allow listing tags via build tooling
          # (e.g., go-winres, git-describe-semver)
          fetch-depth: 0

      - name: Assert source branches are set
        run: |
          abort="false"
          if [[ "${{ format('{0}/{1}', inputs.default-repo, inputs.primary-branch) }}" == "/" ]] ; then \
            echo "default repo and primary branch values not set!"; abort="true"; fi

          if [[ "${{ format('{0}/{1}', inputs.default-repo, inputs.development-branch) }}" == "/" ]] ; then \
            echo "default repo and development branch values not set!"; abort="true"; fi

          if [[ "$abort" == "true" ]]; then exit 1; fi

          echo "Primary branch: ${{ format('{0}/{1}', inputs.default-repo, inputs.primary-branch) }}"
          echo "Development branch: ${{ format('{0}/{1}', inputs.default-repo, inputs.development-branch) }}"

      - name: Assert PR branch is ahead of acceptable source branches
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          if ! (git merge-base --is-ancestor ${{ format('{0}/{1}', inputs.default-repo, inputs.primary-branch) }} ${{ github.event.pull_request.head.sha }} || \
            git merge-base --is-ancestor ${{ format('{0}/{1}', inputs.default-repo, inputs.development-branch) }} ${{ github.event.pull_request.head.sha }});
          then echo "This branch is not up to date with ${{ inputs.primary-branch }} or ${{ inputs.development-branch }} branches!";
          exit 1; fi

  lint_via_optional_linters:
    needs: assert_pr_branch_is_ahead_of_primary_branch
    name: Lint codebase using optional linters
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Don't flag the whole workflow as failed if "experimental" matrix jobs
    # fail. This allows the unstable image linting tasks to fail without
    # marking the oldstable and stable image linting jobs as failed.
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      # Don't stop all workflow jobs if the unstable image linting tasks fail.
      fail-fast: false
      matrix:
        container-image: ["go-ci-oldstable", "go-ci-stable", "go-ci-unstable"]
        experimental: [true]
    container:
      image: "ghcr.io/atc0005/go-ci:${{ matrix.container-image}}"

    steps:
      - name: Check out code
        uses: actions/checkout@v3.5.3

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      - name: Run orijtech/structslop
        run: |
          echo "structslop version $(go version -m $(which structslop) | awk '$1 == "mod" { print $3 }')"
          structslop ./...

      - name: Run orijtech/tickeryzer
        run: |
          echo "tickeryzer version $(go version -m $(which tickeryzer) | awk '$1 == "mod" { print $3 }')"
          tickeryzer ./...

      - name: Run orijtech/httperroryzer
        run: |
          echo "httperroryzer version $(go version -m $(which httperroryzer) | awk '$1 == "mod" { print $3 }')"
          httperroryzer ./...

      - name: Run fatih/errwrap
        run: |
          echo "errwrap version $(go version -m $(which errwrap) | awk '$1 == "mod" { print $3 }')"
          errwrap ./...

      # DISABLED until further review:
      #
      #   - linting suggestions do not seem to apply
      #
      # - name: Run pelletier/go-toml
      #   run: |
      #     echo "tomll version $(go version -m $(which tomll) | awk '$1 == "mod" { print $3 }')"
      #     find . -type f -name '*.toml' -exec tomll {} \;
      #     git diff --exit-code
