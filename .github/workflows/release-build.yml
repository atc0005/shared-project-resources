# Copyright 2023 Adam Chalkley
#
# https://github.com/atc0005/shared-project-resources
#
# Licensed under the MIT License. See LICENSE file in the project root for
# full license information.

on:
  workflow_call:
    inputs:
      os-dependencies:
        required: false
        type: string
      generate-assets:
        required: false
        type: boolean
        default: true
      create-discussion:
        required: false
        type: boolean
        default: true
      default-repo:
        required: false
        type: string
        default: origin
      primary-branch:
        required: false
        type: string
        default: master
      development-branch:
        required: false
        type: string
        default: development
      fetch-depth:
        required: false
        type: number
        default: 50

jobs:
  test_code:
    name: Run tests

    # Skip job if we're not working with a tag.
    if: startsWith(github.ref, 'refs/tags')

    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Don't flag the whole workflow as failed if "experimental" matrix jobs
    # fail. This allows unstable image tests to fail without marking the
    # oldstable and stable image jobs as failed.
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      # Don't stop all workflow jobs if the unstable image tests fail.
      fail-fast: false
      matrix:
        container-image: ["go-ci-oldstable", "go-ci-stable"]
        experimental: [false]
        include:
          - container-image: "go-ci-unstable"
            experimental: true
    container:
      image: "ghcr.io/atc0005/go-ci:${{ matrix.container-image }}"

    steps:
      - name: Log tag info
        run: |
          echo "Ref type: ${{ github.ref_type }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Ref full: ${{ github.ref }}"
          echo "Commit SHA: ${{ github.sha }}"

      # We use completely default options here in order to avoid errors like
      # this one:
      #
      # Error: fatal: Cannot fetch both
      # 3ab151278eb9c5925b43e42b3cbbf4e85141c18c and refs/tags/v0.36.0-alpha.3
      # to refs/tags/v0.36.0-alpha.3
      - name: Check out code
        uses: actions/checkout@v5.0.0

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      - name: Install Ubuntu packages (custom set)
        if: ${{ inputs.os-dependencies != '' }}
        run: apt-get update && apt-get install -y --no-install-recommends ${{ inputs.os-dependencies }}

      - name: Run all tests
        run: go test -mod=vendor -v ./...

  release_build:
    name: Release build using Podman and Makefile

    env:
      # Set environment variable so that our Makefile can take advantage of
      # that value instead of calculating the tag from scratch. This also
      # helps with cases where the current commit has multiple tags associated
      # with it (e.g., a final release tag created from a commit which also
      # has the last release candidate tag).
      REPO_VERSION: "${{ github.ref_name }}"

    # https://docs.github.com/en/actions/security-guides/automatic-token-authentication
    permissions:
      contents: write
      discussions: write

    # Skip job if tests fail or we're not working with a tag.
    needs: test_code
    if: startsWith(github.ref, 'refs/tags')

    runs-on: ubuntu-latest
    # Default: 360 minutes
    timeout-minutes: 45

    steps:
      - name: Log git version
        run: |
          git --version

      - name: Log tag info
        run: |
          echo "Ref type: ${{ github.ref_type }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Ref full: ${{ github.ref }}"
          echo "Commit SHA: ${{ github.sha }}"

      # We use completely default options here in order to avoid errors like
      # this one:
      #
      # Error: fatal: Cannot fetch both
      # 3ab151278eb9c5925b43e42b3cbbf4e85141c18c and refs/tags/v0.36.0-alpha.3
      # to refs/tags/v0.36.0-alpha.3
      - name: Check out code
        uses: actions/checkout@v5.0.0

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      # Additional references are needed for choffmeister/git-describe-semver
      # to successfully generate a release version based on git history.
      - name: Fetch additional references for development branch
        if: contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta')
        run: |
          # Explicitly fetch tags for later "previous tag" calculation.
          #
          # Use `--force` flag to work around Git 2.50+ behavior of not
          # downloading tags reachable from fetched commits by explicitly
          # asking for them.
          git fetch origin ${{ inputs.development-branch }} --depth ${{ inputs.fetch-depth }} --tags --force

      # Additional references are needed for choffmeister/git-describe-semver
      # to successfully generate a release version based on git history.
      - name: Fetch additional references for primary branch
        run: |
          git fetch origin ${{ inputs.primary-branch }} --depth ${{ inputs.fetch-depth }}

      - name: Use Podman to generate release build assets
        if: ${{ inputs.generate-assets }}
        run: make podman-release-build

      # Releases for "dev" tags are associated with the dedicated development
      # branch.
      - name: Generate dev pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        if: contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta')
        run: |
          echo "Generating dev pre-release for ${{ github.ref_name }}"

          echo "Listing all tags"
          git tag --sort=-v:refname

          echo "Listing branches"
          git branch

          echo "Listing current commit details"
          git show

          echo "Calculating previous pre-release tag for use with API request"
          current_tag=$(git describe --tags --abbrev=0)
          echo "current_tag is ${current_tag}"

          echo "Retrieving the commit just before the current tag"
          previous_commit=$(git rev-list -n 1 "$current_tag"^)
          echo "previous_commit is ${previous_commit}"

          echo "Retrieving the previous tag using commit just before the current tag"
          previous_tag=$(git describe --tags --abbrev=0 "$previous_commit")
          echo "previous_tag is ${previous_tag}"

          echo "Setting path for generated release notes"
          release_notes_markdown_file="${{ runner.temp }}/tmp-release-notes.md"
          echo "release_notes_markdown_file is ${release_notes_markdown_file}"

          echo "Generating release notes from API using explicit previous tag"
          gh api \
              -X POST 'repos/{owner}/{repo}/releases/generate-notes' \
              -f tag_name="${{ github.ref_name }}" \
              -f previous_tag_name="${previous_tag}" \
              -f commitish="${{ inputs.development-branch }}"  \
              --jq '.body' > "${release_notes_markdown_file}"

          echo "First 10 lines of generated release notes before formatting tweaks"
          head "${release_notes_markdown_file}"

          echo "Add newline before and after header level 3 (admittedly nitpicky)"
          sed -i -e 's/###/\n###/g' -e 's/\(###.*\)/\1\n/g' "${release_notes_markdown_file}"

          echo "Generating release using previously generated release notes"
          if [[ ${{ inputs.create-discussion }} == "true" ]]; then
            echo "Calling workflow did not disable discussions; creating new release discussion ..."
            gh release create ${{ github.ref_name }} \
              --verify-tag \
              --prerelease \
              --target "${{ inputs.development-branch }}" \
              --discussion-category 'Dev/Release Candidate' \
              --title "${{ github.ref_name }}" \
              --notes-file "${release_notes_markdown_file}" \
              $(if [ -d "release_assets" ]; then find release_assets/ -type f -size +0; fi)
          else
            echo "Calling workflow disabled discussions; skipping creation of new release discussion ..."
            gh release create ${{ github.ref_name }} \
              --verify-tag \
              --prerelease \
              --target "${{ inputs.development-branch }}" \
              --title "${{ github.ref_name }}" \
              --notes-file "${release_notes_markdown_file}" \
              $(if [ -d "release_assets" ]; then find release_assets/ -type f -size +0; fi)
          fi

      # Releases for "rc" tags are associated with the primary branch where
      # stable releases are sourced.
      - name: Generate rc pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: contains(github.ref_name, 'rc')
        run: |
          echo "Generating rc pre-release"
          if [[ ${{ inputs.create-discussion }} == "true" ]]; then
            echo "Calling workflow did not disable discussions; creating new release discussion ..."
            gh release create ${{ github.ref_name }} \
              --verify-tag \
              --prerelease \
              --target "${{ inputs.primary-branch }}" \
              --discussion-category 'Dev/Release Candidate' \
              --title "${{ github.ref_name }}" \
              --generate-notes \
              $(if [ -d "release_assets" ]; then find release_assets/ -type f -size +0; fi)
          else
            echo "Calling workflow disabled discussions; skipping creation of new release discussion ..."
            gh release create ${{ github.ref_name }} \
              --verify-tag \
              --prerelease \
              --target "${{ inputs.primary-branch }}" \
              --title "${{ github.ref_name }}" \
              --generate-notes \
              $(if [ -d "release_assets" ]; then find release_assets/ -type f -size +0; fi)
          fi

      - name: Generate stable release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # https://github.com/orgs/community/discussions/26712
        if: ${{ !(contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc')) }}
        run: |
          echo "Generating stable release"
          if [[ ${{ inputs.create-discussion }} == "true" ]]; then
            echo "Calling workflow did not disable discussions; creating new release discussion ..."
            gh release create ${{ github.ref_name }} \
              --verify-tag \
              --latest \
              --target "${{ inputs.primary-branch }}" \
              --discussion-category 'Stable Release' \
              --title "${{ github.ref_name }}" \
              --generate-notes \
              $(if [ -d "release_assets" ]; then find release_assets/ -type f -size +0; fi)
          else
            echo "Calling workflow disabled discussions; skipping creation of new release discussion ..."
            gh release create ${{ github.ref_name }} \
              --verify-tag \
              --latest \
              --target "${{ inputs.primary-branch }}" \
              --title "${{ github.ref_name }}" \
              --generate-notes \
              $(if [ -d "release_assets" ]; then find release_assets/ -type f -size +0; fi)
          fi
