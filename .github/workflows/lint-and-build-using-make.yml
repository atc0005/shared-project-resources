# Copyright 2022 Adam Chalkley
#
# https://github.com/atc0005/shared-project-resources
#
# Licensed under the MIT License. See LICENSE file in the project root for
# full license information.

on:
  workflow_call:
    inputs:
      os-dependencies:
        required: false
        type: string
      build-all:
        required: false
        type: boolean
      lint-using-makefile:
        required: false
        type: boolean
        default: false
      default-repo:
        required: false
        type: string
        default: origin
      primary-branch:
        required: false
        type: string
        default: master
      development-branch:
        required: false
        type: string
        default: development
      fetch-depth:
        required: false
        type: number
        default: 50

jobs:
  # https://stackoverflow.com/questions/76151411/use-github-actions-to-check-if-branch-is-up-to-date-with-main
  # https://stackoverflow.com/a/76151412/903870
  # https://github.com/atc0005/shared-project-resources/issues/135
  assert_pr_branch_is_ahead_of_primary_branch:
    name: Assert PR branch is ahead
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check out code (subset)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v3.6.0
        with:
          # Retrieve sufficient amount of history (along with tags) to allow
          # build tooling (e.g., go-winres, git-describe-semver) to processing
          # tags as part of asset generation tasks.
          fetch-depth: ${{ inputs.fetch-depth }}
          fetch-tags: true

      - name: Fetch additional references
        run: |
          git fetch origin ${{ inputs.primary-branch }} --depth 50
          git fetch origin ${{ inputs.development-branch }} --depth 50

      - name: Assert source branches are set
        run: |
          abort="false"
          if [[ "${{ format('{0}/{1}', inputs.default-repo, inputs.primary-branch) }}" == "/" ]] ; then \
            echo "default repo and primary branch values not set!"; abort="true"; fi

          if [[ "${{ format('{0}/{1}', inputs.default-repo, inputs.development-branch) }}" == "/" ]] ; then \
            echo "default repo and development branch values not set!"; abort="true"; fi

          if [[ "$abort" == "true" ]]; then exit 1; fi

          echo "Primary branch: ${{ format('{0}/{1}', inputs.default-repo, inputs.primary-branch) }}"
          echo "Development branch: ${{ format('{0}/{1}', inputs.default-repo, inputs.development-branch) }}"

      - name: Assert PR branch is ahead of acceptable source branches
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          if ! (git merge-base --is-ancestor ${{ format('{0}/{1}', inputs.default-repo, inputs.primary-branch) }} ${{ github.event.pull_request.head.sha }} || \
            git merge-base --is-ancestor ${{ format('{0}/{1}', inputs.default-repo, inputs.development-branch) }} ${{ github.event.pull_request.head.sha }});
          then echo "This branch is not up to date with ${{ inputs.primary-branch }} or ${{ inputs.development-branch }} branches!";
          exit 1; fi

  lint_code_with_makefile:
    needs: assert_pr_branch_is_ahead_of_primary_branch
    name: Lint codebase using Makefile
    if: ${{ inputs.lint-using-makefile }}
    runs-on: ubuntu-latest
    # Default: 360 minutes
    timeout-minutes: 10
    container:
      # Use (lightly touched) mirror of current "vanilla" upstream golang image
      image: "ghcr.io/atc0005/go-ci:go-ci-stable-mirror-build"

    steps:
      - name: Print go version
        run: go version

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3.6.0

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      # bsdmainutils provides "column" which is used by the Makefile
      - name: Install Ubuntu packages
        run: apt-get update && apt-get install -y --no-install-recommends make gcc bsdmainutils

      - name: Install Go linting tools
        run: make lintinstall

      # NOTE: We are intentionally *not* removing the repo-provided config
      # file as this workflow is intended to emulate running the Makefile via
      # a local dev environment.
      #
      # - name: Remove repo-provided golangci-lint config file
      #   run: |
      #     # Remove the copy of the config file bundled with the repo/code so
      #     # that the configuration provided by the atc0005/go-ci project is
      #     # used instead
      #     rm -vf .golangci.yml

      - name: Run Go linting tools using project Makefile
        run: make linting

  build_code_with_makefile_quick_recipe:
    needs: assert_pr_branch_is_ahead_of_primary_branch
    name: Build codebase using Makefile quick recipe

    # NOTE: This recipe should now exist for the majority of projects using
    # these (importable) workflows. We reverse the "it is OK to fail" setting
    # in order to surface any projects not yet updated to provide this recipe.
    continue-on-error: false

    runs-on: ubuntu-latest
    # Default: 360 minutes
    timeout-minutes: 10
    container:
      # Use (lightly touched) mirror of current "vanilla" upstream golang image
      image: "ghcr.io/atc0005/go-ci:go-ci-stable-mirror-build"

    steps:
      - name: Print go version
        run: go version

      - name: Check out code (subset)
        uses: actions/checkout@v3.6.0
        with:
          # Retrieve sufficient amount of history (along with tags) to allow
          # build tooling (e.g., go-winres, git-describe-semver) to processing
          # tags as part of asset generation tasks.
          fetch-depth: ${{ inputs.fetch-depth }}
          fetch-tags: true

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      - name: Install Ubuntu packages (standard set)
        if: ${{ inputs.os-dependencies == '' }}
        # bsdmainutils provides "column" which is used by the Makefile
        run: apt-get update && apt-get install -y --no-install-recommends make gcc bsdmainutils xz-utils

      - name: Install Ubuntu packages (custom set)
        if: ${{ inputs.os-dependencies != '' }}
        run: apt-get update && apt-get install -y --no-install-recommends ${{ inputs.os-dependencies }}

      - name: Build using project Makefile "quick" recipe
        run: make quick

  # The `make all` recipe can be expensive, so we disable it by default
  # and enable it only by explicit request (e.g., monthly scheduled job).
  build_code_with_makefile_all_recipe:
    needs: assert_pr_branch_is_ahead_of_primary_branch
    name: Build codebase using Makefile all recipe
    if: ${{ inputs.build-all }}
    runs-on: ubuntu-latest
    # Default: 360 minutes
    #
    # The check-vmware project requires more time than the others, so we use
    # that projects build time as the max runtime for this workflow for all
    # projects.
    timeout-minutes: 55
    container:
      # Use (lightly touched) mirror of current "vanilla" upstream golang image
      image: "ghcr.io/atc0005/go-ci:go-ci-stable-mirror-build"

    steps:
      - name: Print go version
        run: go version

      - name: Check out code (subset)
        uses: actions/checkout@v3.6.0
        with:
          # Retrieve sufficient amount of history (along with tags) to allow
          # build tooling (e.g., go-winres, git-describe-semver) to processing
          # tags as part of asset generation tasks.
          fetch-depth: ${{ inputs.fetch-depth }}
          fetch-tags: true

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      - name: Install Ubuntu packages (standard set)
        if: ${{ inputs.os-dependencies == '' }}
        # bsdmainutils provides "column" which is used by the Makefile
        run: apt-get update && apt-get install -y --no-install-recommends make gcc bsdmainutils xz-utils

      - name: Install Ubuntu packages (custom set)
        if: ${{ inputs.os-dependencies != '' }}
        run: apt-get update && apt-get install -y --no-install-recommends ${{ inputs.os-dependencies }}

      # Try to install build dependencies using the depsinstall Makefile
      # recipe but allow this step to fail without failing the whole job if
      # the recipe is not yet implemented by a project's Makefile.
      - name: Install build dependencies (try)
        run: make depsinstall
        continue-on-error: true

      - name: Build using project Makefile
        run: make all
