# Copyright 2022 Adam Chalkley
#
# https://github.com/atc0005/shared-project-resources
#
# Licensed under the MIT License. See LICENSE file in the project root for
# full license information.

on:
  workflow_call:
    inputs:
      default-repo:
        required: false
        type: string
        default: origin
      primary-branch:
        required: false
        type: string
        default: master
      development-branch:
        required: false
        type: string
        default: development
      fetch-depth:
        required: false
        type: number
        default: 50

  # Allow triggering workflow manually
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
  workflow_dispatch:
    inputs:
      default-repo:
        required: false
        type: string
        default: origin
      primary-branch:
        required: false
        type: string
        default: master
      development-branch:
        required: false
        type: string
        default: development
      fetch-depth:
        required: false
        type: number
        default: 50

jobs:
  # https://stackoverflow.com/questions/76151411/use-github-actions-to-check-if-branch-is-up-to-date-with-main
  # https://stackoverflow.com/a/76151412/903870
  # https://github.com/atc0005/shared-project-resources/issues/135
  assert_pr_branch_is_ahead_of_primary_branch:
    name: Assert PR branch is ahead
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Assert source branches are set
        run: |
          abort="false"
          if [[ "${{ format('{0}/{1}', inputs.default-repo, inputs.primary-branch) }}" == "/" ]] ; then \
            echo "default repo and primary branch values not set!"; abort="true"; fi

          if [[ "${{ format('{0}/{1}', inputs.default-repo, inputs.development-branch) }}" == "/" ]] ; then \
            echo "default repo and development branch values not set!"; abort="true"; fi

          if [[ "$abort" == "true" ]]; then exit 1; fi

          echo "Primary branch: ${{ format('{0}/{1}', inputs.default-repo, inputs.primary-branch) }}"
          echo "Development branch: ${{ format('{0}/{1}', inputs.default-repo, inputs.development-branch) }}"

      - name: Check out code (subset)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v3.6.0
        with:
          fetch-depth: ${{ inputs.fetch-depth }}

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      - name: Fetch additional references
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git fetch origin ${{ inputs.primary-branch }} --depth ${{ inputs.fetch-depth }}

          # Allow fetch attempts for ${{ inputs.development-branch }} to fail
          git fetch origin ${{ inputs.development-branch }} --depth ${{ inputs.fetch-depth }} || true

      - name: Assert PR branch is ahead of acceptable source branches
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          if ! (git merge-base --is-ancestor ${{ format('{0}/{1}', inputs.default-repo, inputs.primary-branch) }} ${{ github.event.pull_request.head.sha }} || \
            git merge-base --is-ancestor ${{ format('{0}/{1}', inputs.default-repo, inputs.development-branch) }} ${{ github.event.pull_request.head.sha }});
          then echo "This branch is not up to date with ${{ inputs.primary-branch }} or ${{ inputs.development-branch }} branches!";
          exit 1; fi

  lint_markdown:
    needs: assert_pr_branch_is_ahead_of_primary_branch
    name: Lint Markdown files
    runs-on: "ubuntu-latest"
    # Default: 360 minutes
    timeout-minutes: 10

    steps:
      - name: Setup Node
        # https://github.com/actions/setup-node
        uses: actions/setup-node@v3.8.1
        with:
          node-version: "lts/*"

      - name: Install Markdown linting tools
        run: |
          npm install markdownlint --save-dev
          npm install -g markdownlint-cli
          echo "markdownlint version: $(markdownlint --version)"

      - name: Check out code
        uses: actions/checkout@v3.6.0

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      - name: Run Markdown linting tools
        # The `.markdownlint.yml` file specifies config settings for this
        # linter, including which linting rules to ignore.
        #
        # Note: Explicitly ignoring top-level vendor folder; we do not want
        # potential linting issues in bundled documentation to fail linting CI
        # runs for *our* documentation
        run: |
          echo "markdownlint version: $(markdownlint --version)"
          markdownlint '**/*.md' --ignore node_modules --ignore vendor

  lint_dockerfiles:
    needs: assert_pr_branch_is_ahead_of_primary_branch
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    timeout-minutes: 10
    container:
      image: ghcr.io/hadolint/hadolint:latest-debian

    steps:
      - name: Check out code
        uses: actions/checkout@v3.6.0

      - name: Run hadolint against any Dockerfiles
        if: hashFiles('**/Dockerfile') != ''
        run: |
          hadolint --version
          find  . -name "Dockerfile" -print -exec hadolint {} \;
