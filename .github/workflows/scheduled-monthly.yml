# Copyright 2023 Adam Chalkley
#
# https://github.com/atc0005/shared-project-resources
#
# Licensed under the MIT License. See LICENSE file in the project root for
# full license information.

# Purpose: This importable workflow is intended to act as a wrapper or bucket
# for tasks that are run on a monthly schedule. This can be used to run jobs
# that are more intensive/expensive than would be warranted to run on every
# pull request or a more frequent (e.g., weekly) schedule.

on:
  workflow_call:
    # Default for all inputs is off/false, but overridable from the calling
    # workflow.
    inputs:
      os-dependencies:
        required: false
        type: string
      build-packages:
        required: false
        type: boolean
        default: true
      build-podman-release:
        required: false
        type: boolean
        default: true
      makefile-build-all:
        required: false
        type: boolean
        default: true
      makefile-enable-i386-architecture:
        required: false
        type: boolean
        default: false
      default-repo:
        required: false
        type: string
        default: origin
      primary-branch:
        required: false
        type: string
        default: master
      development-branch:
        required: false
        type: string
        default: development
      fetch-depth:
        required: false
        type: number
        default: 50

jobs:
  # https://stackoverflow.com/questions/76151411/use-github-actions-to-check-if-branch-is-up-to-date-with-main
  # https://stackoverflow.com/a/76151412/903870
  # https://github.com/atc0005/shared-project-resources/issues/135
  assert_pr_branch_is_ahead_of_primary_branch:
    name: Assert PR branch is ahead
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Assert source branches are set
        run: |
          abort="false"
          if [[ "${{ format('{0}/{1}', inputs.default-repo, inputs.primary-branch) }}" == "/" ]] ; then \
            echo "default repo and primary branch values not set!"; abort="true"; fi

          if [[ "${{ format('{0}/{1}', inputs.default-repo, inputs.development-branch) }}" == "/" ]] ; then \
            echo "default repo and development branch values not set!"; abort="true"; fi

          if [[ "$abort" == "true" ]]; then exit 1; fi

          echo "Primary branch: ${{ format('{0}/{1}', inputs.default-repo, inputs.primary-branch) }}"
          echo "Development branch: ${{ format('{0}/{1}', inputs.default-repo, inputs.development-branch) }}"

      - name: Check out code (subset)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v4.1.4
        with:
          fetch-depth: ${{ inputs.fetch-depth }}

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      - name: Fetch additional references
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git fetch origin ${{ inputs.primary-branch }} --depth ${{ inputs.fetch-depth }}

          # Allow fetch attempts for ${{ inputs.development-branch }} to fail
          git fetch origin ${{ inputs.development-branch }} --depth ${{ inputs.fetch-depth }} || true

      - name: Assert PR branch is ahead of acceptable source branches
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          if ! (git merge-base --is-ancestor ${{ format('{0}/{1}', inputs.default-repo, inputs.primary-branch) }} ${{ github.event.pull_request.head.sha }} || \
            git merge-base --is-ancestor ${{ format('{0}/{1}', inputs.default-repo, inputs.development-branch) }} ${{ github.event.pull_request.head.sha }});
          then echo "This branch is not up to date with ${{ inputs.primary-branch }} or ${{ inputs.development-branch }} branches!";
          exit 1; fi

  lint_and_build_using_ci_matrix:
    needs: assert_pr_branch_is_ahead_of_primary_branch
    name: CI matrix
    with:
      # Pass on any values specified by the importing workflow.
      os-dependencies: ${{ inputs.os-dependencies }}
    uses: atc0005/shared-project-resources/.github/workflows/lint-and-build-using-ci-matrix.yml@master

  lint_and_build_using_makefile:
    needs: assert_pr_branch_is_ahead_of_primary_branch
    name: Makefile
    with:
      # Pass on any values specified by the importing workflow.
      os-dependencies: ${{ inputs.os-dependencies }}

      # Makefile-initiated linting tasks use the latest upstream versions of
      # community standard linting tools (e.g., staticcheck, golangci-lint)
      # instead of relying on a fixed version (as with container-based linting
      # tasks).
      #
      # This is *usually* fine, but when buggy linter releases (e.g., gosec)
      # are bundled into a new golangci-lint release the development team
      # generally opts to give the upstream linter devs time to remediate the
      # problem instead of immediately rolling back the buggy bundled linter.
      # This makes sense from a project management perspective (time
      # requirements), but in the meantime this increases the number of
      # false-positive linting failures for anyone using the very latest
      # version of golangci-lint.
      #
      # As an initial workaround we restrict Makefile-initiated linting tasks
      # as a monthly job. The hope is that by a month later any upstream
      # linter issues would be fixed or the golangci-lint dev team would
      # release a new version with the buggy upstream linter rolled back.
      #
      # At some point we may opt to drop Makefile-initiated linting tasks
      # entirely.
      #
      # refs https://github.com/atc0005/shared-project-resources/issues/149
      lint-using-makefile: true

      # The `make all` recipe can be expensive, so we disable it by default
      # and enable it here (by default) as part of a scheduled monthly job.
      #
      # We use a workflow input to allow toggling this off as needed by
      # dependent projects.
      build-all: ${{ inputs.makefile-build-all }}

      # Some CGO-enabled projects require i386 packages to be installed if
      # building x86 assets on a x64 OS. This is opt-in as most projects do
      # not require this build option.
      enable-i386-architecture: ${{ inputs.makefile-enable-i386-architecture }}
    uses: atc0005/shared-project-resources/.github/workflows/lint-and-build-using-make.yml@master

  build_packages_using_container:
    needs: assert_pr_branch_is_ahead_of_primary_branch
    name: Build packages using container
    with:
      # Pass on any values specified by the importing workflow.
      os-dependencies: ${{ inputs.os-dependencies }}

      # TODO: Override this from the calling/importing workflow if the project
      # does not support generating release assets directly (e.g., library
      # project).
      build-packages: ${{ inputs.build-packages }}
    uses: atc0005/shared-project-resources/.github/workflows/container-builds-packages.yml@master

  build_release_assets_using_container:
    needs: assert_pr_branch_is_ahead_of_primary_branch
    name: Build release assets using container
    with:
      # TODO: Override this from the calling/importing workflow if the project
      # does not support generating release assets directly (e.g., library
      # project).
      build-podman-release: ${{ inputs.build-podman-release }}
    uses: atc0005/shared-project-resources/.github/workflows/container-builds-release.yml@master
